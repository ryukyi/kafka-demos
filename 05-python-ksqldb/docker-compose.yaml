services:

  # kafka broker 1
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://broker:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server broker:29092 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 60

  # Create topic when kafka is healthy i.e. can respond with version
  init-broker:
    image: apache/kafka:latest
    container_name: init-broker
    hostname: init-broker
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: "/opt/kafka/bin/kafka-topics.sh --create --partitions 30 --topic python-events --bootstrap-server broker:29092"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      init-broker:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  # Consumer start listening to topic after broker has created the topic
  python-consumer:
    hostname: python-consumer
    container_name: python-consumer
    build:
      context: ./python-consumer
    depends_on:
      init-broker:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      DB_NAME: kafka-db 
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: kafka-db

  # ksql db
  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://ksqldb-server:8088"]
      interval: 10s
      retries: 10

  # ksql cli
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      ksqldb-server:
        condition: service_healthy
    volumes:
      - ./ksqldb-cli/init-ksql.sql/:/data/scripts/init-ksql.sql
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for ksqlDB to be available before launching CLI\n"
        while [ $(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088) -eq 000 ]
        do 
          echo -e $(date) "ksqlDB Server HTTP state: " $(curl -s -o /dev/null -w %{http_code} http://ksqldb-server:8088) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running SQL commands\n"
        cat /data/scripts/init-ksql.sql <(echo -e '\nEXIT') | ksql http://ksqldb-server:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity

  # DBeaver
  # ksql driver from confluent:
  # https://www.confluent.io/hub/confluentinc/kafka-connect-jdbc
  # navigating UI and download button:
  # https://d2p6pa21dvn84.cloudfront.net/api/plugins/confluentinc/kafka-connect-jdbc/versions/10.8.0/confluentinc-kafka-connect-jdbc-10.8.0.zip
  # DBeaver with startup script to download ksqlDB JDBC driver
  dbeaver:
    image: dbeaver/cloudbeaver:latest
    hostname: dbeaver
    container_name: dbeaver
    ports:
      - "8978:8978"
    volumes:
      - ./dbeaver/jdbc-drivers:/opt/dbeaver/drivers
    environment:
      - CB_SERVER_PORT=8978
      - CB_SERVER_NAME=DBeaver
    command: >
      /bin/bash -c "
      apt-get update && apt-get install -y curl unzip && 
      curl -o /opt/dbeaver/drivers/confluentinc-kafka-connect-jdbc.zip https://d2p6pa21dvn84.cloudfront.net/api/plugins/confluentinc/kafka-connect-jdbc/versions/10.8.0/confluentinc-kafka-connect-jdbc-10.8.0.zip && 
      unzip /opt/dbeaver/drivers/confluentinc-kafka-connect-jdbc.zip -d /opt/dbeaver/drivers/ && 
      /opt/cloudbeaver/run-server.sh
      "
