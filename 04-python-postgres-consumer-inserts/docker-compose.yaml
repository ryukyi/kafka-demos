services:

  # kafka broker 1
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://broker:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server broker:29092 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 60

  # Create topic when kafka is healthy i.e. can respond with version
  init-broker:
    image: apache/kafka:latest
    container_name: init-broker
    hostname: init-broker
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: "/opt/kafka/bin/kafka-topics.sh --create --partitions 30 --topic python-events --bootstrap-server broker:29092"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      init-broker:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  # Consumer start listening to topic after broker has created the topic
  python-consumer:
    hostname: python-consumer
    container_name: python-consumer
    build:
      context: ./python-consumer
    depends_on:
      init-broker:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      DB_NAME: kafka_db 
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: kafka_db

  # postgres db example
  kafka_db:
    image: postgres:latest
    hostname: kafka_db
    container_name: kafka_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: kafka_db
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  # cloud community edition - requires manual config
  dbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: dbeaver
    ports:
      - "8978:8978"
    volumes:
      - ./db/dbeaver/workspaces/:/opt/cloudbeaver/workspaces/
